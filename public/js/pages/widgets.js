/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 158);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/widgets.js":
/*!************************************************!*\
  !*** ./resources/metronic/js/pages/widgets.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Class definition\n\nvar KTWidgets = function () {\n  // Private properties\n  // General Controls\n  var _initDaterangepicker = function _initDaterangepicker() {\n    if ($('#kt_dashboard_daterangepicker').length == 0) {\n      return;\n    }\n\n    var picker = $('#kt_dashboard_daterangepicker');\n    var start = moment();\n    var end = moment();\n\n    function cb(start, end, label) {\n      var title = '';\n      var range = '';\n\n      if (end - start < 100 || label == 'Today') {\n        title = 'Today:';\n        range = start.format('MMM D');\n      } else if (label == 'Yesterday') {\n        title = 'Yesterday:';\n        range = start.format('MMM D');\n      } else {\n        range = start.format('MMM D') + ' - ' + end.format('MMM D');\n      }\n\n      $('#kt_dashboard_daterangepicker_date').html(range);\n      $('#kt_dashboard_daterangepicker_title').html(title);\n    }\n\n    picker.daterangepicker({\n      direction: KTUtil.isRTL(),\n      startDate: start,\n      endDate: end,\n      //opens: 'left',\n      applyClass: 'btn-primary',\n      cancelClass: 'btn-light-primary',\n      autoApply: true,\n      ranges: {\n        'All Time': [moment('01-01-1970'), moment()],\n        'Today': [moment(), moment()],\n        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n        'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n        'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n        'This Month': [moment().startOf('month'), moment().endOf('month')],\n        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n      }\n    }, cb);\n    cb(start, end, '');\n  }; // Stats widgets\n\n\n  var _initStatsWidget7 = function _initStatsWidget7() {\n    var element = document.getElementById(\"kt_stats_widget_7_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['success']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget8 = function _initStatsWidget8() {\n    var element = document.getElementById(\"kt_stats_widget_8_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['danger']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['danger']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget9 = function _initStatsWidget9() {\n    var element = document.getElementById(\"kt_stats_widget_9_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['primary']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['primary']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['primary']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['primary']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget10 = function _initStatsWidget10() {\n    var element = document.getElementById(\"kt_stats_widget_10_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'info';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget11 = function _initStatsWidget11() {\n    var element = document.getElementById(\"kt_stats_widget_11_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'success';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Aug', 'Sep'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget12 = function _initStatsWidget12() {\n    var element = document.getElementById(\"kt_stats_widget_12_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Aug', 'Sep'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Charts widgets\n\n\n  var _initChartsWidget1 = function _initChartsWidget1() {\n    var element = document.getElementById(\"kt_charts_widget_1_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105]\n      }],\n      chart: {\n        type: 'bar',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['gray']['gray-300']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget2 = function _initChartsWidget2() {\n    var element = document.getElementById(\"kt_charts_widget_2_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105]\n      }],\n      chart: {\n        type: 'bar',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['warning'], KTApp.getSettings()['colors']['gray']['gray-300']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget3 = function _initChartsWidget3() {\n    var element = document.getElementById(\"kt_charts_widget_3_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 40, 40, 90, 90, 70, 70]\n      }],\n      chart: {\n        type: 'area',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['info']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['theme']['base']['info'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        //size: 5,\n        //colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: KTApp.getSettings()['colors']['theme']['base']['info'],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget4 = function _initChartsWidget4() {\n    var element = document.getElementById(\"kt_charts_widget_4_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [60, 50, 80, 40, 100, 60]\n      }, {\n        name: 'Revenue',\n        data: [70, 60, 110, 40, 50, 70]\n      }],\n      chart: {\n        type: 'area',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['theme']['light']['success'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['warning']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['warning']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['warning']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget5 = function _initChartsWidget5() {\n    var element = document.getElementById(\"kt_charts_widget_5_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        data: [-30, -40, -55, -60, -40, -20]\n      }],\n      chart: {\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['12%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: -80,\n        max: 80,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget6 = function _initChartsWidget6() {\n    var element = document.getElementById(\"kt_charts_widget_6_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        type: 'bar',\n        stacked: true,\n        data: [10, 20, 30, 10, 20, 30]\n      }, {\n        name: 'Revenue',\n        type: 'bar',\n        stacked: true,\n        data: [30, 20, 10, 30, 20, 10]\n      }],\n      title: {\n        text: 'Conversions',\n        align: 'left',\n        margin: 10,\n        offsetX: 0,\n        offsetY: 0,\n        floating: false,\n        style: {\n          fontSize: '14px',\n          fontWeight: 'bold'\n        }\n      },\n      chart: {\n        stacked: true,\n        height: 200,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          stacked: true,\n          horizontal: false,\n          endingShape: 'rounded',\n          columnWidth: ['20%']\n        }\n      },\n      legend: {\n        show: true,\n        position: 'top',\n        horizontalAlign: 'right',\n        offsetX: 0,\n        offsetY: -40\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['1 Jan', '3 Jan', '5 Jan', '7 Jan', '9 Jan', '11 Jan'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        max: 40,\n        tickAmount: 10,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary'], KTApp.getSettings()['colors']['theme']['light']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget7 = function _initChartsWidget7() {\n    var element = document.getElementById(\"kt_charts_widget_7_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 50, 50, 35, 35]\n      }, {\n        name: 'Revenue',\n        data: [55, 20, 20, 20, 70, 70]\n      }, {\n        name: 'Expenses',\n        data: [60, 60, 40, 40, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 300,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['warning'], 'transparent', 'transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['warning'], KTApp.getSettings()['colors']['theme']['light']['info'], KTApp.getSettings()['colors']['gray']['gray-100']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['warning'], KTApp.getSettings()['colors']['theme']['light']['info'], KTApp.getSettings()['colors']['gray']['gray-100']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['warning'], KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['gray']['gray-500']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget8 = function _initChartsWidget8() {\n    var element = document.getElementById(\"kt_charts_widget_8_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 50, 50, 35, 35]\n      }, {\n        name: 'Revenue',\n        data: [55, 20, 20, 20, 70, 70]\n      }, {\n        name: 'Expenses',\n        data: [60, 60, 40, 40, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 300,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: ['transparent', 'transparent', 'transparent']\n      },\n      xaxis: {\n        x: 0,\n        offsetX: 0,\n        offsetY: 0,\n        padding: {\n          left: 0,\n          right: 0,\n          top: 0\n        },\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        y: 0,\n        offsetX: 0,\n        offsetY: 0,\n        padding: {\n          left: 0,\n          right: 0\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['danger'], KTApp.getSettings()['colors']['theme']['light']['info']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        padding: {\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['danger'], KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['danger'], KTApp.getSettings()['colors']['theme']['base']['info']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget9 = function _initChartsWidget9() {\n    var element = document.getElementById(\"kt_charts_widget_9_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 30, 45, 35, 25]\n      }, {\n        name: 'Revenue',\n        data: [-20, -30, -45, -35, -25]\n      }],\n      chart: {\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['17%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 0,\n        colors: ['transparent']\n      },\n      xaxis: {\n        lines: {\n          show: false\n        },\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        lines: {\n          show: false\n        },\n        min: -50,\n        max: 50,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Mixed widgets\n\n\n  var _initMixedWidget1 = function _initMixedWidget1() {\n    var element = document.getElementById(\"kt_mixed_widget_1_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var strokeColor = '#D13647';\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 1\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'straight',\n        show: true,\n        width: 1,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#EE8E90'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget2 = function _initMixedWidget2() {\n    var element = document.getElementById(\"kt_mixed_widget_2_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var strokeColor = '#287ED7';\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 0.5\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 0\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['transparent'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget3 = function _initMixedWidget3() {\n    var element = document.getElementById(\"kt_mixed_widget_3_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var strokeColor = KTApp.getSettings()['colors']['theme']['base']['white'];\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 0.3\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 0\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['transparent'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['dark']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget4 = function _initMixedWidget4() {\n    var element = document.getElementById(\"kt_mixed_widget_4_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget5 = function _initMixedWidget5() {\n    var element = document.getElementById(\"kt_mixed_widget_5_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget6 = function _initMixedWidget6() {\n    var element = document.getElementById(\"kt_mixed_widget_6_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget13 = function _initMixedWidget13() {\n    var element = document.getElementById(\"kt_mixed_widget_13_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 25, 45, 30, 55, 55]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['info']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 60,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['info']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget14 = function _initMixedWidget14() {\n    var element = document.getElementById(\"kt_mixed_widget_14_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [74],\n      chart: {\n        height: height,\n        type: 'radialBar'\n      },\n      plotOptions: {\n        radialBar: {\n          hollow: {\n            margin: 0,\n            size: \"65%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: false,\n              fontWeight: '700'\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"30px\",\n              fontWeight: '700',\n              offsetY: 12,\n              show: true\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['theme']['light']['success'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget15 = function _initMixedWidget15() {\n    var element = document.getElementById(\"kt_mixed_widget_15_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 60, 25, 25, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'gradient',\n        opacity: 1,\n        gradient: {\n          type: \"vertical\",\n          shadeIntensity: 0.5,\n          gradientToColors: undefined,\n          inverseColors: true,\n          opacityFrom: 1,\n          opacityTo: 0.375,\n          stops: [25, 50, 100],\n          colorStops: []\n        }\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['danger']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 65,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['danger']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget16 = function _initMixedWidget16() {\n    var element = document.getElementById(\"kt_mixed_widget_16_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [60, 50, 75, 80],\n      chart: {\n        height: height,\n        type: 'radialBar'\n      },\n      plotOptions: {\n        radialBar: {\n          hollow: {\n            margin: 0,\n            size: \"30%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: false,\n              fontWeight: \"700\"\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"18px\",\n              fontWeight: \"700\",\n              offsetY: 10,\n              show: true\n            },\n            total: {\n              show: true,\n              label: 'Total',\n              fontWeight: \"bold\",\n              formatter: function formatter(w) {\n                // By default this function returns the average of all series. The below is just an example to show the use of custom formatter function\n                return '60%';\n              }\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['gray']['gray-100'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['danger'], KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget17 = function _initMixedWidget17() {\n    var element = document.getElementById(\"kt_mixed_widget_17_chart\");\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'warning';\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 25, 45, 30, 55, 55]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 60,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget18 = function _initMixedWidget18() {\n    var element = document.getElementById(\"kt_mixed_widget_18_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [90],\n      chart: {\n        height: height,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"700\",\n              offsetY: -5,\n              color: KTApp.getSettings()['colors']['gray']['gray-500']\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"30px\",\n              fontWeight: \"700\",\n              offsetY: -40,\n              formatter: function formatter(val) {\n                return parseInt(val);\n              }\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['theme']['light']['primary'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Total Interception\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n    var element = document.getElementById(\"kt_mixed_widget_19_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [20],\n      chart: {\n        height: height,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"700\",\n              offsetY: -5,\n              color: KTApp.getSettings()['colors']['gray']['gray-500']\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"30px\",\n              fontWeight: \"700\",\n              offsetY: -40,\n              formatter: function formatter(val) {\n                return parseInt(val);\n              }\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['theme']['light']['primary'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: ['#D66D6F'],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Total Interception\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n    var element = document.getElementById(\"kt_mixed_widget_20_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [55],\n      chart: {\n        height: height,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"700\",\n              offsetY: -5,\n              color: KTApp.getSettings()['colors']['gray']['gray-500']\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"30px\",\n              fontWeight: \"700\",\n              offsetY: -40,\n              formatter: function formatter(val) {\n                return parseInt(val);\n              }\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['theme']['light']['primary'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: ['#47C4AB'],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Total Interception\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Tiles\n\n\n  var _initTilesWidget1 = function _initTilesWidget1() {\n    var element = document.getElementById(\"kt_tiles_widget_1_chart\");\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 22, 30, 28, 25, 26, 30, 28, 22, 24, 25, 35]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'gradient',\n        opacity: 1,\n        gradient: {\n          type: \"vertical\",\n          shadeIntensity: 0.55,\n          gradientToColors: undefined,\n          inverseColors: true,\n          opacityFrom: 1,\n          opacityTo: 0.2,\n          stops: [25, 50, 100],\n          colorStops: []\n        }\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 37,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      },\n      padding: {\n        top: 0,\n        bottom: 0\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget2 = function _initTilesWidget2() {\n    var element = document.getElementById(\"kt_tiles_widget_2_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var strokeColor = KTUtil.colorDarken(KTApp.getSettings()['colors']['theme']['base']['danger'], 20);\n    var fillColor = KTUtil.colorDarken(KTApp.getSettings()['colors']['theme']['base']['danger'], 10);\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 10, 20, 20, 12, 12]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          top: 0,\n          bottom: 0\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 22,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        }\n      },\n      colors: [fillColor],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget5 = function _initTilesWidget5() {\n    var element = document.getElementById(\"kt_tiles_widget_5_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 15, 18, 14]\n      }, {\n        name: 'Revenue',\n        data: [8, 13, 16, 12]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['25%'],\n          endingShape: 'rounded'\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: ['solid', 'gradient'],\n        opacity: 0.25\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May']\n      },\n      yaxis: {\n        min: 0,\n        max: 20\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff']\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget8 = function _initTilesWidget8() {\n    var element = document.getElementById(\"kt_tiles_widget_8_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'danger';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 20, 30, 15, 40, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid'\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 45,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      },\n      padding: {\n        top: 0,\n        bottom: 0\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget17 = function _initTilesWidget17() {\n    var element = document.getElementById(\"kt_tiles_widget_17_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 20, 20, 8]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          top: 0,\n          bottom: 0\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['success']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 22,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget20 = function _initTilesWidget20() {\n    var element = document.getElementById(\"kt_tiles_widget_20_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [74],\n      chart: {\n        height: 250,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"400\",\n              offsetY: -5,\n              color: KTApp.getSettings()['colors']['gray']['gray-300']\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['theme']['inverse']['primary'],\n              fontSize: \"22px\",\n              fontWeight: \"bold\",\n              offsetY: -40,\n              show: true\n            }\n          },\n          track: {\n            background: KTUtil.colorLighten(KTApp.getSettings()['colors']['theme']['base']['primary'], 7),\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['inverse']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget21 = function _initMixedWidget21() {\n    var element = document.getElementById(\"kt_tiles_widget_21_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'info';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 20, 30, 15, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 32,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget23 = function _initMixedWidget23() {\n    var element = document.getElementById(\"kt_tiles_widget_23_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [15, 25, 15, 40, 20, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: 125,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan, 2020', 'Feb, 2020', 'Mar, 2020', 'Apr, 2020', 'May, 2020', 'Jun, 2020'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Forms\n\n\n  var _initFormsWidget1 = function _initFormsWidget1() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_1_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget2 = function _initFormsWidget2() {\n    var formEl = KTUtil.getById(\"kt_forms_widget_2_form\");\n    var editorId = 'kt_forms_widget_2_editor'; // init editor\n\n    var options = {\n      modules: {\n        toolbar: {\n          container: \"#kt_forms_widget_2_editor_toolbar\"\n        }\n      },\n      placeholder: 'Type message...',\n      theme: 'snow'\n    };\n\n    if (!formEl) {\n      return;\n    } // Init editor\n\n\n    var editorObj = new Quill('#' + editorId, options);\n  };\n\n  var _initFormsWidget3 = function _initFormsWidget3() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_3_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget4 = function _initFormsWidget4() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_4_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget5 = function _initFormsWidget5() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_5_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget6 = function _initFormsWidget6() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_6_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget7 = function _initFormsWidget7() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_7_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget8 = function _initFormsWidget8() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_8_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget9 = function _initFormsWidget9() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_9_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget10 = function _initFormsWidget10() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_10_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget11 = function _initFormsWidget11() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_11_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget12 = function _initFormsWidget12() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_12_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  }; // Advance Tables\n\n\n  var _initAdvancedTableGroupSelection = function _initAdvancedTableGroupSelection(element) {\n    var table = KTUtil.getById(element);\n\n    if (!table) {\n      return;\n    }\n\n    KTUtil.on(table, 'thead th .checkbox > input', 'change', function (e) {\n      var checkboxes = KTUtil.findAll(table, 'tbody td .checkbox > input');\n\n      for (var i = 0, len = checkboxes.length; i < len; i++) {\n        checkboxes[i].checked = this.checked;\n      }\n    });\n  };\n\n  var _initPriceSlider = function _initPriceSlider(element) {\n    // init slider\n    var slider = document.getElementById(element);\n\n    if (typeof slider === 'undefined') {\n      return;\n    }\n\n    if (!slider) {\n      return;\n    }\n\n    noUiSlider.create(slider, {\n      start: [20, 60],\n      connect: true,\n      range: {\n        'min': 0,\n        'max': 100\n      }\n    });\n  }; // Education Show More Demo\n\n\n  var _initEducationShowMoreBtn = function _initEducationShowMoreBtn() {\n    var el = KTUtil.getById('kt_app_education_more_feeds_btn');\n\n    if (!el) {\n      return;\n    }\n\n    KTUtil.addEvent(el, 'click', function (e) {\n      var elements = document.getElementsByClassName('education-more-feeds');\n\n      if (!elements || elements.length <= 0) {\n        return;\n      }\n\n      KTUtil.btnWait(el, 'spinner spinner-right spinner-white pr-15', 'Please wait...', true);\n      setTimeout(function () {\n        KTUtil.btnRelease(el);\n        KTUtil.addClass(el, 'd-none');\n        var item;\n\n        for (var i = 0, len = elements.length; i < len; i++) {\n          item = elements[0];\n          KTUtil.removeClass(elements[i], 'd-none');\n          var textarea = KTUtil.find(item, 'textarea');\n\n          if (textarea) {\n            autosize(textarea);\n          }\n        }\n\n        KTUtil.scrollTo(item);\n      }, 1000);\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      // General Controls\n     // _initDaterangepicker();\n // Stats Widgets\n\n\n      _initStatsWidget7();\n\n      _initStatsWidget8();\n\n      _initStatsWidget9();\n\n      _initStatsWidget10();\n\n      _initStatsWidget11();\n\n      _initStatsWidget12(); // Charts Widgets\n\n\n      _initChartsWidget1();\n\n      _initChartsWidget2();\n\n      _initChartsWidget3();\n\n      _initChartsWidget4();\n\n      _initChartsWidget5();\n\n      _initChartsWidget6();\n\n      _initChartsWidget7();\n\n      _initChartsWidget8();\n\n      _initChartsWidget9(); // Mixed Widgets\n\n\n      _initMixedWidget1();\n\n      _initMixedWidget2();\n\n      _initMixedWidget3();\n\n      _initMixedWidget4();\n\n      _initMixedWidget5();\n\n      _initMixedWidget6();\n\n      _initMixedWidget13();\n\n      _initMixedWidget14();\n\n      _initMixedWidget15();\n\n      _initMixedWidget16();\n\n      _initMixedWidget17();\n\n      _initMixedWidget18(); // Tiles Widgets\n\n\n      _initTilesWidget1();\n\n      _initTilesWidget2();\n\n      _initTilesWidget5();\n\n      _initTilesWidget8();\n\n      _initTilesWidget17();\n\n      _initTilesWidget20();\n\n      _initMixedWidget21();\n\n      _initMixedWidget23(); // Table Widgets\n\n\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_1');\n\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_2');\n\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_3');\n\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_4'); // Form Widgets\n\n\n      _initPriceSlider('kt_price_slider'); // Forms widgets\n\n\n      _initFormsWidget1();\n\n      _initFormsWidget2();\n\n      _initFormsWidget3();\n\n      _initFormsWidget4();\n\n      _initFormsWidget5();\n\n      _initFormsWidget6();\n\n      _initFormsWidget7();\n\n      _initFormsWidget8();\n\n      _initFormsWidget9();\n\n      _initFormsWidget10();\n\n      _initFormsWidget11(); // Education App\n\n\n      _initEducationShowMoreBtn();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTWidgets;\n}\n\njQuery(document).ready(function () {\n  KTWidgets.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvd2lkZ2V0cy5qcz9lMzc0Il0sIm5hbWVzIjpbIktUV2lkZ2V0cyIsIl9pbml0RGF0ZXJhbmdlcGlja2VyIiwiJCIsImxlbmd0aCIsInBpY2tlciIsInN0YXJ0IiwibW9tZW50IiwiZW5kIiwiY2IiLCJsYWJlbCIsInRpdGxlIiwicmFuZ2UiLCJmb3JtYXQiLCJodG1sIiwiZGF0ZXJhbmdlcGlja2VyIiwiZGlyZWN0aW9uIiwiS1RVdGlsIiwiaXNSVEwiLCJzdGFydERhdGUiLCJlbmREYXRlIiwiYXBwbHlDbGFzcyIsImNhbmNlbENsYXNzIiwiYXV0b0FwcGx5IiwicmFuZ2VzIiwic3VidHJhY3QiLCJzdGFydE9mIiwiZW5kT2YiLCJfaW5pdFN0YXRzV2lkZ2V0NyIsImVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwib3B0aW9ucyIsInNlcmllcyIsIm5hbWUiLCJkYXRhIiwiY2hhcnQiLCJ0eXBlIiwiaGVpZ2h0IiwidG9vbGJhciIsInNob3ciLCJ6b29tIiwiZW5hYmxlZCIsInNwYXJrbGluZSIsInBsb3RPcHRpb25zIiwibGVnZW5kIiwiZGF0YUxhYmVscyIsImZpbGwiLCJvcGFjaXR5Iiwic3Ryb2tlIiwiY3VydmUiLCJ3aWR0aCIsImNvbG9ycyIsIktUQXBwIiwiZ2V0U2V0dGluZ3MiLCJ4YXhpcyIsImNhdGVnb3JpZXMiLCJheGlzQm9yZGVyIiwiYXhpc1RpY2tzIiwibGFiZWxzIiwic3R5bGUiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJjcm9zc2hhaXJzIiwicG9zaXRpb24iLCJjb2xvciIsImRhc2hBcnJheSIsInRvb2x0aXAiLCJmb3JtYXR0ZXIiLCJ1bmRlZmluZWQiLCJvZmZzZXRZIiwieWF4aXMiLCJzdGF0ZXMiLCJub3JtYWwiLCJmaWx0ZXIiLCJ2YWx1ZSIsImhvdmVyIiwiYWN0aXZlIiwiYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb24iLCJ5IiwidmFsIiwibWFya2VycyIsInN0cm9rZUNvbG9yIiwic3Ryb2tlV2lkdGgiLCJBcGV4Q2hhcnRzIiwicmVuZGVyIiwiX2luaXRTdGF0c1dpZGdldDgiLCJfaW5pdFN0YXRzV2lkZ2V0OSIsIl9pbml0U3RhdHNXaWRnZXQxMCIsInBhcnNlSW50IiwiY3NzIiwiaGFzQXR0ciIsImF0dHIiLCJtaW4iLCJtYXgiLCJfaW5pdFN0YXRzV2lkZ2V0MTEiLCJfaW5pdFN0YXRzV2lkZ2V0MTIiLCJfaW5pdENoYXJ0c1dpZGdldDEiLCJiYXIiLCJob3Jpem9udGFsIiwiY29sdW1uV2lkdGgiLCJlbmRpbmdTaGFwZSIsImdyaWQiLCJib3JkZXJDb2xvciIsInN0cm9rZURhc2hBcnJheSIsImxpbmVzIiwiX2luaXRDaGFydHNXaWRnZXQyIiwiX2luaXRDaGFydHNXaWRnZXQzIiwiX2luaXRDaGFydHNXaWRnZXQ0IiwiX2luaXRDaGFydHNXaWRnZXQ1Iiwic3RhY2tlZCIsIl9pbml0Q2hhcnRzV2lkZ2V0NiIsInRleHQiLCJhbGlnbiIsIm1hcmdpbiIsIm9mZnNldFgiLCJmbG9hdGluZyIsImZvbnRXZWlnaHQiLCJob3Jpem9udGFsQWxpZ24iLCJ0aWNrQW1vdW50IiwicGFkZGluZyIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIl9pbml0Q2hhcnRzV2lkZ2V0NyIsIl9pbml0Q2hhcnRzV2lkZ2V0OCIsIngiLCJfaW5pdENoYXJ0c1dpZGdldDkiLCJfaW5pdE1peGVkV2lkZ2V0MSIsImRyb3BTaGFkb3ciLCJlbmFibGVkT25TZXJpZXMiLCJibHVyIiwibWFya2VyIiwiX2luaXRNaXhlZFdpZGdldDIiLCJfaW5pdE1peGVkV2lkZ2V0MyIsIl9pbml0TWl4ZWRXaWRnZXQ0IiwiX2luaXRNaXhlZFdpZGdldDUiLCJfaW5pdE1peGVkV2lkZ2V0NiIsIl9pbml0TWl4ZWRXaWRnZXQxMyIsIl9pbml0TWl4ZWRXaWRnZXQxNCIsInJhZGlhbEJhciIsImhvbGxvdyIsInNpemUiLCJzaG93T24iLCJ0cmFjayIsImJhY2tncm91bmQiLCJsaW5lQ2FwIiwiX2luaXRNaXhlZFdpZGdldDE1IiwiZ3JhZGllbnQiLCJzaGFkZUludGVuc2l0eSIsImdyYWRpZW50VG9Db2xvcnMiLCJpbnZlcnNlQ29sb3JzIiwib3BhY2l0eUZyb20iLCJvcGFjaXR5VG8iLCJzdG9wcyIsImNvbG9yU3RvcHMiLCJfaW5pdE1peGVkV2lkZ2V0MTYiLCJ0b3RhbCIsInciLCJfaW5pdE1peGVkV2lkZ2V0MTciLCJfaW5pdE1peGVkV2lkZ2V0MTgiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJfaW5pdFRpbGVzV2lkZ2V0MSIsIl9pbml0VGlsZXNXaWRnZXQyIiwiY29sb3JEYXJrZW4iLCJmaWxsQ29sb3IiLCJmaXhlZCIsIl9pbml0VGlsZXNXaWRnZXQ1IiwiX2luaXRUaWxlc1dpZGdldDgiLCJfaW5pdFRpbGVzV2lkZ2V0MTciLCJfaW5pdFRpbGVzV2lkZ2V0MjAiLCJjb2xvckxpZ2h0ZW4iLCJfaW5pdE1peGVkV2lkZ2V0MjEiLCJfaW5pdE1peGVkV2lkZ2V0MjMiLCJfaW5pdEZvcm1zV2lkZ2V0MSIsImlucHV0RWwiLCJnZXRCeUlkIiwiYXV0b3NpemUiLCJfaW5pdEZvcm1zV2lkZ2V0MiIsImZvcm1FbCIsImVkaXRvcklkIiwibW9kdWxlcyIsImNvbnRhaW5lciIsInBsYWNlaG9sZGVyIiwidGhlbWUiLCJlZGl0b3JPYmoiLCJRdWlsbCIsIl9pbml0Rm9ybXNXaWRnZXQzIiwiX2luaXRGb3Jtc1dpZGdldDQiLCJfaW5pdEZvcm1zV2lkZ2V0NSIsIl9pbml0Rm9ybXNXaWRnZXQ2IiwiX2luaXRGb3Jtc1dpZGdldDciLCJfaW5pdEZvcm1zV2lkZ2V0OCIsIl9pbml0Rm9ybXNXaWRnZXQ5IiwiX2luaXRGb3Jtc1dpZGdldDEwIiwiX2luaXRGb3Jtc1dpZGdldDExIiwiX2luaXRGb3Jtc1dpZGdldDEyIiwiX2luaXRBZHZhbmNlZFRhYmxlR3JvdXBTZWxlY3Rpb24iLCJ0YWJsZSIsIm9uIiwiZSIsImNoZWNrYm94ZXMiLCJmaW5kQWxsIiwiaSIsImxlbiIsImNoZWNrZWQiLCJfaW5pdFByaWNlU2xpZGVyIiwic2xpZGVyIiwibm9VaVNsaWRlciIsImNyZWF0ZSIsImNvbm5lY3QiLCJfaW5pdEVkdWNhdGlvblNob3dNb3JlQnRuIiwiZWwiLCJhZGRFdmVudCIsImVsZW1lbnRzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImJ0bldhaXQiLCJzZXRUaW1lb3V0IiwiYnRuUmVsZWFzZSIsImFkZENsYXNzIiwiaXRlbSIsInJlbW92ZUNsYXNzIiwidGV4dGFyZWEiLCJmaW5kIiwic2Nyb2xsVG8iLCJpbml0IiwibW9kdWxlIiwiZXhwb3J0cyIsImpRdWVyeSIsInJlYWR5Il0sIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUcsWUFBWTtBQUN4QjtBQUVBO0FBQ0EsTUFBSUMsb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QixHQUFZO0FBQ25DLFFBQUlDLENBQUMsQ0FBQywrQkFBRCxDQUFELENBQW1DQyxNQUFuQyxJQUE2QyxDQUFqRCxFQUFvRDtBQUNoRDtBQUNIOztBQUVELFFBQUlDLE1BQU0sR0FBR0YsQ0FBQyxDQUFDLCtCQUFELENBQWQ7QUFDQSxRQUFJRyxLQUFLLEdBQUdDLE1BQU0sRUFBbEI7QUFDQSxRQUFJQyxHQUFHLEdBQUdELE1BQU0sRUFBaEI7O0FBRUEsYUFBU0UsRUFBVCxDQUFZSCxLQUFaLEVBQW1CRSxHQUFuQixFQUF3QkUsS0FBeEIsRUFBK0I7QUFDM0IsVUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxVQUFJQyxLQUFLLEdBQUcsRUFBWjs7QUFFQSxVQUFLSixHQUFHLEdBQUdGLEtBQVAsR0FBZ0IsR0FBaEIsSUFBdUJJLEtBQUssSUFBSSxPQUFwQyxFQUE2QztBQUN6Q0MsYUFBSyxHQUFHLFFBQVI7QUFDQUMsYUFBSyxHQUFHTixLQUFLLENBQUNPLE1BQU4sQ0FBYSxPQUFiLENBQVI7QUFDSCxPQUhELE1BR08sSUFBSUgsS0FBSyxJQUFJLFdBQWIsRUFBMEI7QUFDN0JDLGFBQUssR0FBRyxZQUFS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QUNqQkMsdUJBQWlCOztBQUNqQkMsd0JBQWtCOztBQUNsQkMsd0JBQWtCLEdBbkVKLENBcUVkOzs7QUFDQWdCLCtCQUF5QjtBQUM1QjtBQXhFRSxHQUFQO0FBMEVILENBM3RKZSxFQUFoQixDLENBNnRKQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQy9CZSxRQUFNLENBQUNDLE9BQVAsR0FBaUJwTyxTQUFqQjtBQUNIOztBQUVEcU8sTUFBTSxDQUFDeE0sUUFBRCxDQUFOLENBQWlCeU0sS0FBakIsQ0FBdUIsWUFBWTtBQUMvQnRPLFdBQVMsQ0FBQ2tPLElBQVY7QUFDSCxDQUZEIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL3BhZ2VzL3dpZGdldHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gQ2xhc3MgZGVmaW5pdGlvblxudmFyIEtUV2lkZ2V0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcblxuICAgIC8vIEdlbmVyYWwgQ29udHJvbHNcbiAgICB2YXIgX2luaXREYXRlcmFuZ2VwaWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKCcja3RfZGFzaGJvYXJkX2RhdGVyYW5nZXBpY2tlcicpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGlja2VyID0gJCgnI2t0X2Rhc2hib2FyZF9kYXRlcmFuZ2VwaWNrZXInKTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gbW9tZW50KCk7XG4gICAgICAgIHZhciBlbmQgPSBtb21lbnQoKTtcblxuICAgICAgICBmdW5jdGlvbiBjYihzdGFydCwgZW5kLCBsYWJlbCkge1xuICAgICAgICAgICAgdmFyIHRpdGxlID0gJyc7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSAnJztcblxuICAgICAgICAgICAgaWYgKChlbmQgLSBzdGFydCkgPCAxMDAgfHwgbGFiZWwgPT0gJ1RvZGF5Jykge1xuICAgICAgICAgICAgICAgIHRpdGxlID0gJ1RvZGF5Oic7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBzdGFydC5mb3JtYXQoJ01NTSBEJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhYmVsID09ICdZZXN0ZXJkYXknKSB7XG4gICAgICAgICAgICAgICAgdGl0bGUgPSAnWWVzdGVyZGF5Oic7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBzdGFydC5mb3JtYXQoJ01NTSBEJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhbmdlID0gc3RhcnQuZm9ybWF0KCdNTU0gRCcpICsgJyAtICcgKyBlbmQuZm9ybWF0KCdNTU0gRCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcja3RfZGFzaGJvYXJkX2RhdGVyYW5nZXBpY2tlcl9kYXRlJykuaHRtbChyYW5nZSk7XG4gICAgICAgICAgICAkKCcja3RfZGFzaGJvYXJkX2RhdGVyYW5nZXBpY2tlcl90aXRsZScpLmh0bWwodGl0bGUpO1xuICAgICAgICB9XG5cblxuICAgICAgICBwaWNrZXIuZGF0ZXJhbmdlcGlja2VyKHtcbiAgICAgICAgICAgIGRpcmVjdGlvbjogS1RVdGlsLmlzUlRMKCksXG4gICAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0LFxuICAgICAgICAgICAgZW5kRGF0ZTogZW5kLFxuICAgICAgICAgICAgLy9vcGVuczogJ2xlZnQnLFxuICAgICAgICAgICAgYXBwbHlDbGFzczogJ2J0bi1wcmltYXJ5JyxcbiAgICAgICAgICAgIGNhbmNlbENsYXNzOiAnYnRuLWxpZ2h0LXByaW1hcnknLFxuICAgICAgICAgICAgYXV0b0FwcGx5OiB0cnVlLFxuICAgICAgICAgICAgcmFuZ2VzOiB7XG4gICAgICAgICAgICAgICAgJ0FsbCBUaW1lJzogW21vbWVudCgnMDEtMDEtMTk3MCcpLCBtb21lbnQoKV0sXG4gICAgICAgICAgICAgICAgJ1RvZGF5JzogW21vbWVudCgpLCBtb21lbnQoKV0sXG4gICAgICAgICAgICAgICAgJ1llc3RlcmRheSc6IFttb21lbnQoKS5zdWJ0cmFjdCgxLCAnZGF5cycpLCBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnZGF5cycpXSxcbiAgICAgICAgICAgICAgICAnTGFzdCA3IERheXMnOiBbbW9tZW50KCkuc3VidHJhY3QoNiwgJ2RheXMnKSwgbW9tZW50KCldLFxuICAgICAgICAgICAgICAgICdMYXN0IDMwIERheXMnOiBbbW9tZW50KCkuc3VidHJhY3QoMjksICdkYXlzJyksIG1vbWVudCgpXSxcbiAgICAgICAgICAgICAgICAnVGhpcyBNb250aCc6IFttb21lbnQoKS5zdGFydE9mKCdtb250aCcpLCBtb21lbnQoKS5lbmRPZignbW9udGgnKV0sXG4gICAgICAgICAgICAgICAgJ0xhc3QgTW9udGgnOiBbbW9tZW50KCkuc3VidHJhY3QoMSwgJ21vbnRoJykuc3RhcnRPZignbW9udGgnKSwgbW9tZW50KCkuc3VidHJhY3QoMSwgJ21vbnRoJykuZW5kT2YoJ21vbnRoJyldLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBjYik7XG5cbiAgICAgICAgY2Ioc3RhcnQsIGVuZCwgJycpO1xuICAgIH1cblxuICAgIC8vIFN0YXRzIHdpZGdldHNcbiAgICB2YXIgX2luaXRTdGF0c1dpZGdldDcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9zdGF0c193aWRnZXRfN19jaGFydFwiKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDQ1LCAzMiwgNzAsIDQwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ11dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ11dLFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ11dLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnc3VjY2VzcyddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRTdGF0c1dpZGdldDggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9zdGF0c193aWRnZXRfOF9jaGFydFwiKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDQ1LCAzMiwgNzAsIDQwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydkYW5nZXInXV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1biddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnZGFuZ2VyJ11dLFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydkYW5nZXInXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydkYW5nZXInXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0U3RhdHNXaWRnZXQ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3Rfc3RhdHNfd2lkZ2V0XzlfY2hhcnRcIik7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzMwLCA0NSwgMzIsIDcwLCA0MF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNTAsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsncHJpbWFyeSddXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydwcmltYXJ5J11dLFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydwcmltYXJ5J11dLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsncHJpbWFyeSddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRTdGF0c1dpZGdldDEwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3Rfc3RhdHNfd2lkZ2V0XzEwX2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuICAgICAgICB2YXIgY29sb3IgPSBLVFV0aWwuaGFzQXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpID8gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA6ICdpbmZvJztcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDAsIDQwLCAzMCwgMzAsIDM1LCAzNSwgNTBdXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHpvb206IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAzLFxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0zMDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgIG1heDogNTUsXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdFN0YXRzV2lkZ2V0MTEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9zdGF0c193aWRnZXRfMTFfY2hhcnRcIik7XG5cbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcbiAgICAgICAgdmFyIGNvbG9yID0gS1RVdGlsLmhhc0F0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA/IEtUVXRpbC5hdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgOiAnc3VjY2Vzcyc7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzQwLCA0MCwgMzAsIDMwLCAzNSwgMzUsIDUwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddW2NvbG9yXV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdBdWcnLCAnU2VwJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDU1LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRTdGF0c1dpZGdldDEyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3Rfc3RhdHNfd2lkZ2V0XzEyX2NoYXJ0XCIpO1xuXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XG4gICAgICAgIHZhciBjb2xvciA9IEtUVXRpbC5oYXNBdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgPyBLVFV0aWwuYXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpIDogJ3ByaW1hcnknO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFs0MCwgNDAsIDMwLCAzMCwgMzUsIDM1LCA1MF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnQXVnJywgJ1NlcCddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiA1NSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddW2NvbG9yXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgLy8gQ2hhcnRzIHdpZGdldHNcbiAgICB2YXIgX2luaXRDaGFydHNXaWRnZXQxID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfY2hhcnRzX3dpZGdldF8xX2NoYXJ0XCIpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFs0NCwgNTUsIDU3LCA1NiwgNjEsIDU4XVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbNzYsIDg1LCAxMDEsIDk4LCA4NywgMTA1XVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUwLFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzMwJSddLFxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnc3VjY2VzcyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddXSxcbiAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0yMDAnXSxcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0Q2hhcnRzV2lkZ2V0MiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2NoYXJ0c193aWRnZXRfMl9jaGFydFwiKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDQsIDU1LCA1NywgNTYsIDYxLCA1OF1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXG4gICAgICAgICAgICAgICAgZGF0YTogWzc2LCA4NSwgMTAxLCA5OCwgODcsIDEwNV1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1MCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogWyczMCUnXSxcbiAgICAgICAgICAgICAgICAgICAgZW5kaW5nU2hhcGU6ICdyb3VuZGVkJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyLFxuICAgICAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCddXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3dhcm5pbmcnXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0zMDAnXV0sXG4gICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMjAwJ10sXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxuICAgICAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdENoYXJ0c1dpZGdldDMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9jaGFydHNfd2lkZ2V0XzNfY2hhcnRcIik7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzMwLCA0MCwgNDAsIDkwLCA5MCwgNzAsIDcwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1MCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ11dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZyddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnaW5mbyddLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydpbmZvJ11dLFxuICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcbiAgICAgICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICAvL3NpemU6IDUsXG4gICAgICAgICAgICAgICAgLy9jb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnZGFuZ2VyJ11dLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ10sXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0Q2hhcnRzV2lkZ2V0NCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2NoYXJ0c193aWRnZXRfNF9jaGFydFwiKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbNjAsIDUwLCA4MCwgNDAsIDEwMCwgNjBdXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFs3MCwgNjAsIDExMCwgNDAsIDUwLCA3MF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzNTAsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnc3VjY2VzcyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWyd3YXJuaW5nJ11dLFxuICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcbiAgICAgICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnc3VjY2VzcyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnd2FybmluZyddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWyd3YXJuaW5nJ11dLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdENoYXJ0c1dpZGdldDUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9jaGFydHNfd2lkZ2V0XzVfY2hhcnRcIik7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzQwLCA1MCwgNjUsIDcwLCA1MCwgMzBdXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFstMzAsIC00MCwgLTU1LCAtNjAsIC00MCwgLTIwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxuICAgICAgICAgICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzNTAsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IFsnMTIlJ10sXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMixcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogLTgwLFxuICAgICAgICAgICAgICAgIG1heDogODAsXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2luZm8nXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsncHJpbWFyeSddXSxcbiAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0yMDAnXSxcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0Q2hhcnRzV2lkZ2V0NiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2NoYXJ0c193aWRnZXRfNl9jaGFydFwiKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IFsxMCwgMjAsIDMwLCAxMCwgMjAsIDMwXVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgMjAsIDEwLCAzMCwgMjAsIDEwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdDb252ZXJzaW9ucycsXG4gICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICBtYXJnaW46IDEwLFxuICAgICAgICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICBmbG9hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc3R5bGU6e1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzIwJSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wJyxcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsQWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAtNDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWycxIEphbicsICczIEphbicsICc1IEphbicsICc3IEphbicsICc5IEphbicsICcxMSBKYW4nXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtYXg6IDQwLFxuICAgICAgICAgICAgICAgIHRpY2tBbW91bnQ6IDEwLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3ByaW1hcnknXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3ByaW1hcnknXV0sXG4gICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMjAwJ10sXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxuICAgICAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRDaGFydHNXaWRnZXQ3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfY2hhcnRzX3dpZGdldF83X2NoYXJ0XCIpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgMzAsIDUwLCA1MCwgMzUsIDM1XVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbNTUsIDIwLCAyMCwgMjAsIDcwLCA3MF1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnRXhwZW5zZXMnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFs2MCwgNjAsIDQwLCA0MCwgMzAsIDMwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMixcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWyd3YXJuaW5nJ10sICd0cmFuc3BhcmVudCcsICd0cmFuc3BhcmVudCddXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWyd3YXJuaW5nJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydpbmZvJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMTAwJ11dLFxuICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcbiAgICAgICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnd2FybmluZyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnaW5mbyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTEwMCddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3dhcm5pbmcnXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnaW5mbyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRDaGFydHNXaWRnZXQ4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfY2hhcnRzX3dpZGdldF84X2NoYXJ0XCIpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgMzAsIDUwLCA1MCwgMzUsIDM1XVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbNTUsIDIwLCAyMCwgMjAsIDcwLCA3MF1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnRXhwZW5zZXMnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFs2MCwgNjAsIDQwLCA0MCwgMzAsIDMwXVxuICAgICAgICAgICAgfSxdLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDAsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50JywgJ3RyYW5zcGFyZW50JywgJ3RyYW5zcGFyZW50J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0zMDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3N1Y2Nlc3MnXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2RhbmdlciddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnaW5mbyddXSxcbiAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0yMDAnXSxcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydkYW5nZXInXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2luZm8nXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2RhbmdlciddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ11dLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdENoYXJ0c1dpZGdldDkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9jaGFydHNfd2lkZ2V0XzlfY2hhcnRcIik7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzIwLCAzMCwgNDUsIDM1LCAyNV1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXG4gICAgICAgICAgICAgICAgZGF0YTogWy0yMCwgLTMwLCAtNDUsIC0zNSwgLTI1XVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxuICAgICAgICAgICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzNTAsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IFsnMTclJ10sXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtaW46IC01MCxcbiAgICAgICAgICAgICAgICBtYXg6IDUwLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3ByaW1hcnknXV0sXG4gICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMjAwJ10sXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxuICAgICAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIC8vIE1peGVkIHdpZGdldHNcbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfMV9jaGFydFwiKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHJva2VDb2xvciA9ICcjRDEzNjQ3JztcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzMwLCA0NSwgMzIsIDcwLCA0MCwgNDAsIDQwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJvcFNoYWRvdzoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkT25TZXJpZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiA1LFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICBibHVyOiAzLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzdHJhaWdodCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtzdHJva2VDb2xvcl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgIG1heDogODAsXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFsnI0VFOEU5MCddLFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydkYW5nZXInXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtzdHJva2VDb2xvcl0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfbWl4ZWRfd2lkZ2V0XzJfY2hhcnRcIik7XG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3Ryb2tlQ29sb3IgPSAnIzI4N0VENyc7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgNDUsIDMyLCA3MCwgNDAsIDQwLCA0MF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyb3BTaGFkb3c6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZE9uU2VyaWVzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogNSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgYmx1cjogMyxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbc3Ryb2tlQ29sb3JdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZyddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiA4MCxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCddLFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydpbmZvJ11dLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbc3Ryb2tlQ29sb3JdLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdE1peGVkV2lkZ2V0MyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF8zX2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnd2hpdGUnXTtcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzMwLCA0NSwgMzIsIDcwLCA0MCwgNDAsIDQwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJvcFNoYWRvdzoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkT25TZXJpZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiA1LFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICBibHVyOiAzLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuM1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtzdHJva2VDb2xvcl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDgwLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J10sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2RhcmsnXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtzdHJva2VDb2xvcl0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfbWl4ZWRfd2lkZ2V0XzRfY2hhcnRcIik7XG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzM1LCA2NSwgNzUsIDU1LCA0NSwgNjAsIDU1XVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDAsIDcwLCA4MCwgNjAsIDUwLCA2NSwgNjBdXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2JhcicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogWyczMCUnXSxcbiAgICAgICAgICAgICAgICAgICAgZW5kaW5nU2hhcGU6ICdyb3VuZGVkJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCddXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgIG1heDogMTAwLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogWydzb2xpZCcsICdzb2xpZCddLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IFswLjI1LCAxXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogWycjZmZmZmZmJywgJyNmZmZmZmYnXSxcbiAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0yMDAnXSxcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAyMCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDIwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfNV9jaGFydFwiKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzUsIDY1LCA3NSwgNTUsIDQ1LCA2MCwgNTVdXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFs0MCwgNzAsIDgwLCA2MCwgNTAsIDY1LCA2MF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzMwJSddLFxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBbJ3NvbGlkJywgJ3NvbGlkJ10sXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogWzAuMjUsIDFdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbJyNmZmZmZmYnLCAnI2ZmZmZmZiddLFxuICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcbiAgICAgICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDIwLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogMjBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdE1peGVkV2lkZ2V0NiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF82X2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFszNSwgNjUsIDc1LCA1NSwgNDUsIDYwLCA1NV1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXG4gICAgICAgICAgICAgICAgZGF0YTogWzQwLCA3MCwgODAsIDYwLCA1MCwgNjUsIDYwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IFsnMzAlJ10sXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDEwMCxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFsnc29saWQnLCAnc29saWQnXSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBbMC4yNSwgMV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFsnI2ZmZmZmZicsICcjZmZmZmZmJ10sXG4gICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMjAwJ10sXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxuICAgICAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMjAsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAyMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQxMyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF8xM19jaGFydFwiKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDI1LCA0NSwgMzAsIDU1LCA1NV1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnaW5mbyddXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiA2MCxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnaW5mbyddXSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnaW5mbyddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2luZm8nXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQxNCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF8xNF9jaGFydFwiKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbNzRdLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsQmFyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHJhZGlhbEJhcjoge1xuICAgICAgICAgICAgICAgICAgICBob2xsb3c6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IFwiNjUlXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd09uOiBcImFsd2F5c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc3MDAnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS03MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIzMHB4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogJzcwMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMTIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0cmFjazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3N1Y2Nlc3MnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMTAwJSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ11dLFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgbGluZUNhcDogXCJyb3VuZFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhYmVsczogW1wiUHJvZ3Jlc3NcIl1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQxNSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF8xNV9jaGFydFwiKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDMwLCA2MCwgMjUsIDI1LCA0MF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2dyYWRpZW50JyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIGdyYWRpZW50OiB7XG5cbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgICAgICAgICBzaGFkZUludGVuc2l0eTogMC41LFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudFRvQ29sb3JzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGludmVyc2VDb2xvcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAxLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5VG86IDAuMzc1LFxuICAgICAgICAgICAgICAgICAgICBzdG9wczogWzI1LCA1MCwgMTAwXSxcbiAgICAgICAgICAgICAgICAgICAgY29sb3JTdG9wczogW11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnZGFuZ2VyJ11dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDY1LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydkYW5nZXInXV0sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2RhbmdlciddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2RhbmdlciddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDE2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfbWl4ZWRfd2lkZ2V0XzE2X2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFs2MCwgNTAsIDc1LCA4MF0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxCYXInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgcmFkaWFsQmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIGhvbGxvdzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCIzMCVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93T246IFwiYWx3YXlzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCI3MDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTcwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjE4cHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjcwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCeSBkZWZhdWx0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgYXZlcmFnZSBvZiBhbGwgc2VyaWVzLiBUaGUgYmVsb3cgaXMganVzdCBhbiBleGFtcGxlIHRvIHNob3cgdGhlIHVzZSBvZiBjdXN0b20gZm9ybWF0dGVyIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnNjAlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTEwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcxMDAlJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW1xuICAgICAgICAgICAgICAgIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2luZm8nXSxcbiAgICAgICAgICAgICAgICBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydkYW5nZXInXSxcbiAgICAgICAgICAgICAgICBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ10sXG4gICAgICAgICAgICAgICAgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsncHJpbWFyeSddXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgbGluZUNhcDogXCJyb3VuZFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhYmVsczogW1wiUHJvZ3Jlc3NcIl1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQxNyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF8xN19jaGFydFwiKTtcbiAgICAgICAgdmFyIGNvbG9yID0gS1RVdGlsLmhhc0F0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA/IEtUVXRpbC5hdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgOiAnd2FybmluZyc7XG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzMwLCAyNSwgNDUsIDMwLCA1NSwgNTVdXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHpvb206IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAzLFxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiA2MCxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddW2NvbG9yXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQxOCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF8xOF9jaGFydFwiKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbOTBdLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsQmFyJyxcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICByYWRpYWxCYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogLTkwLFxuICAgICAgICAgICAgICAgICAgICBlbmRBbmdsZTogOTAsXG5cbiAgICAgICAgICAgICAgICAgICAgaG9sbG93OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcIjcwJVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dPbjogXCJhbHdheXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjEzcHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjcwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC01LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS03MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIzMHB4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCI3MDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtNDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0cmFjazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3ByaW1hcnknXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMTAwJSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydwcmltYXJ5J11dLFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgbGluZUNhcDogXCJyb3VuZFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhYmVsczogW1wiVG90YWwgSW50ZXJjZXB0aW9uXCJdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuXG5cbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF8xOV9jaGFydFwiKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbMjBdLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsQmFyJyxcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICByYWRpYWxCYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogLTkwLFxuICAgICAgICAgICAgICAgICAgICBlbmRBbmdsZTogOTAsXG5cbiAgICAgICAgICAgICAgICAgICAgaG9sbG93OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcIjcwJVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dPbjogXCJhbHdheXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjEzcHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjcwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC01LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS03MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIzMHB4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCI3MDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtNDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0cmFjazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3ByaW1hcnknXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMTAwJSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFsnI0Q2NkQ2RiddLFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgbGluZUNhcDogXCJyb3VuZFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhYmVsczogW1wiVG90YWwgSW50ZXJjZXB0aW9uXCJdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfMjBfY2hhcnRcIik7XG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogWzU1XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3JhZGlhbEJhcicsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgcmFkaWFsQmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IC05MCxcbiAgICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IDkwLFxuXG4gICAgICAgICAgICAgICAgICAgIGhvbGxvdzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCI3MCVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93T246IFwiYWx3YXlzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIxM3B4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCI3MDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMzBweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiNzAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2s6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydwcmltYXJ5J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogJzEwMCUnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbJyM0N0M0QUInXSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIGxpbmVDYXA6IFwicm91bmRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbHM6IFtcIlRvdGFsIEludGVyY2VwdGlvblwiXVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcblxuXG4gICAgfVxuXG4gICAgLy8gVGlsZXNcbiAgICB2YXIgX2luaXRUaWxlc1dpZGdldDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF90aWxlc193aWRnZXRfMV9jaGFydFwiKTtcbiAgICAgICAgdmFyIGNvbG9yID0gS1RVdGlsLmhhc0F0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA/IEtUVXRpbC5hdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgOiAncHJpbWFyeSc7XG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzIwLCAyMiwgMzAsIDI4LCAyNSwgMjYsIDMwLCAyOCwgMjIsIDI0LCAyNSwgMzVdXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHpvb206IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdncmFkaWVudCcsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICBncmFkaWVudDoge1xuXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidmVydGljYWxcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZGVJbnRlbnNpdHk6IDAuNTUsXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50VG9Db2xvcnM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgaW52ZXJzZUNvbG9yczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eUZyb206IDEsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHlUbzogMC4yLFxuICAgICAgICAgICAgICAgICAgICBzdG9wczogWzI1LCA1MCwgMTAwXSxcbiAgICAgICAgICAgICAgICAgICAgY29sb3JTdG9wczogW11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDM3LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdFRpbGVzV2lkZ2V0MiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3RpbGVzX3dpZGdldF8yX2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gS1RVdGlsLmNvbG9yRGFya2VuKEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2RhbmdlciddLCAyMCk7XG4gICAgICAgIHZhciBmaWxsQ29sb3IgPSBLVFV0aWwuY29sb3JEYXJrZW4oS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnZGFuZ2VyJ10sIDEwKTtcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzEwLCAxMCwgMjAsIDIwLCAxMiwgMTJdXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHpvb206IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtzdHJva2VDb2xvcl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0zMDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiAyMixcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmaXhlZDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbCArIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbZmlsbENvbG9yXSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnZGFuZ2VyJ11dLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbc3Ryb2tlQ29sb3JdLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdFRpbGVzV2lkZ2V0NSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3RpbGVzX3dpZGdldF81X2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFsxMCwgMTUsIDE4LCAxNF1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXG4gICAgICAgICAgICAgICAgZGF0YTogWzgsIDEzLCAxNiwgMTJdXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2JhcicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMjAsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAyMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IFsnMjUlJ10sXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBbJ3NvbGlkJywgJ2dyYWRpZW50J10sXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC4yNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgIG1heDogMjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZml4ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwgKyBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbJyNmZmZmZmYnLCAnI2ZmZmZmZiddXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdFRpbGVzV2lkZ2V0OCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3RpbGVzX3dpZGdldF84X2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuICAgICAgICB2YXIgY29sb3IgPSBLVFV0aWwuaGFzQXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpID8gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA6ICdkYW5nZXInO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFsyMCwgMjAsIDMwLCAxNSwgNDAsIDMwXVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDQ1LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHZhciBfaW5pdFRpbGVzV2lkZ2V0MTcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF90aWxlc193aWRnZXRfMTdfY2hhcnRcIik7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzEwLCAyMCwgMjAsIDhdXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTUwLFxuICAgICAgICAgICAgICAgIHpvb206IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ11dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heSddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDIyLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpeGVkOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsICsgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnc3VjY2VzcyddXSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnc3VjY2VzcyddXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3N1Y2Nlc3MnXV0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0VGlsZXNXaWRnZXQyMCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3RpbGVzX3dpZGdldF8yMF9jaGFydFwiKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbNzRdLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1MCxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsQmFyJyxcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICByYWRpYWxCYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogLTkwLFxuICAgICAgICAgICAgICAgICAgICBlbmRBbmdsZTogOTAsXG5cbiAgICAgICAgICAgICAgICAgICAgaG9sbG93OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcIjcwJVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dPbjogXCJhbHdheXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjEzcHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjQwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC01LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2ludmVyc2UnXVsncHJpbWFyeSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjIycHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtNDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0cmFjazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogS1RVdGlsLmNvbG9yTGlnaHRlbihLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydwcmltYXJ5J10sIDcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcxMDAlJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydpbnZlcnNlJ11bJ3ByaW1hcnknXV0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBsaW5lQ2FwOiBcInJvdW5kXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFiZWxzOiBbXCJQcm9ncmVzc1wiXVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDIxID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfdGlsZXNfd2lkZ2V0XzIxX2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuICAgICAgICB2YXIgY29sb3IgPSBLVFV0aWwuaGFzQXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpID8gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA6ICdpbmZvJztcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbMjAsIDIwLCAzMCwgMTUsIDMwLCAzMF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDMyLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDIzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfdGlsZXNfd2lkZ2V0XzIzX2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuICAgICAgICB2YXIgY29sb3IgPSBLVFV0aWwuaGFzQXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpID8gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA6ICdwcmltYXJ5JztcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbMTUsIDI1LCAxNSwgNDAsIDIwLCA1MF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMjUsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0phbiwgMjAyMCcsICdGZWIsIDIwMjAnLCAnTWFyLCAyMDIwJywgJ0FwciwgMjAyMCcsICdNYXksIDIwMjAnLCAnSnVuLCAyMDIwJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDU1LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICAvLyBGb3Jtc1xuICAgIHZhciBfaW5pdEZvcm1zV2lkZ2V0MSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzFfaW5wdXRcIik7XG5cbiAgICAgICAgaWYgKGlucHV0RWwpIHtcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF9pbml0Rm9ybXNXaWRnZXQyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmb3JtRWwgPSBLVFV0aWwuZ2V0QnlJZChcImt0X2Zvcm1zX3dpZGdldF8yX2Zvcm1cIik7XG4gICAgICAgIHZhciBlZGl0b3JJZCA9ICdrdF9mb3Jtc193aWRnZXRfMl9lZGl0b3InO1xuXG4gICAgICAgIC8vIGluaXQgZWRpdG9yXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgbW9kdWxlczoge1xuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBcIiNrdF9mb3Jtc193aWRnZXRfMl9lZGl0b3JfdG9vbGJhclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnVHlwZSBtZXNzYWdlLi4uJyxcbiAgICAgICAgICAgIHRoZW1lOiAnc25vdydcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIWZvcm1FbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdCBlZGl0b3JcbiAgICAgICAgdmFyIGVkaXRvck9iaiA9IG5ldyBRdWlsbCgnIycgKyBlZGl0b3JJZCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0Rm9ybXNXaWRnZXQzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnB1dEVsID0gS1RVdGlsLmdldEJ5SWQoXCJrdF9mb3Jtc193aWRnZXRfM19pbnB1dFwiKTtcblxuICAgICAgICBpZiAoaW5wdXRFbCkge1xuICAgICAgICAgICAgYXV0b3NpemUoaW5wdXRFbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGlucHV0RWwgPSBLVFV0aWwuZ2V0QnlJZChcImt0X2Zvcm1zX3dpZGdldF80X2lucHV0XCIpO1xuXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XG4gICAgICAgICAgICBhdXRvc2l6ZShpbnB1dEVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfaW5pdEZvcm1zV2lkZ2V0NSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzVfaW5wdXRcIik7XG5cbiAgICAgICAgaWYgKGlucHV0RWwpIHtcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF9pbml0Rm9ybXNXaWRnZXQ2ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnB1dEVsID0gS1RVdGlsLmdldEJ5SWQoXCJrdF9mb3Jtc193aWRnZXRfNl9pbnB1dFwiKTtcblxuICAgICAgICBpZiAoaW5wdXRFbCkge1xuICAgICAgICAgICAgYXV0b3NpemUoaW5wdXRFbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGlucHV0RWwgPSBLVFV0aWwuZ2V0QnlJZChcImt0X2Zvcm1zX3dpZGdldF83X2lucHV0XCIpO1xuXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XG4gICAgICAgICAgICBhdXRvc2l6ZShpbnB1dEVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfaW5pdEZvcm1zV2lkZ2V0OCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzhfaW5wdXRcIik7XG5cbiAgICAgICAgaWYgKGlucHV0RWwpIHtcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF9pbml0Rm9ybXNXaWRnZXQ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnB1dEVsID0gS1RVdGlsLmdldEJ5SWQoXCJrdF9mb3Jtc193aWRnZXRfOV9pbnB1dFwiKTtcblxuICAgICAgICBpZiAoaW5wdXRFbCkge1xuICAgICAgICAgICAgYXV0b3NpemUoaW5wdXRFbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDEwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnB1dEVsID0gS1RVdGlsLmdldEJ5SWQoXCJrdF9mb3Jtc193aWRnZXRfMTBfaW5wdXRcIik7XG5cbiAgICAgICAgaWYgKGlucHV0RWwpIHtcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF9pbml0Rm9ybXNXaWRnZXQxMSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzExX2lucHV0XCIpO1xuXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XG4gICAgICAgICAgICBhdXRvc2l6ZShpbnB1dEVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfaW5pdEZvcm1zV2lkZ2V0MTIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGlucHV0RWwgPSBLVFV0aWwuZ2V0QnlJZChcImt0X2Zvcm1zX3dpZGdldF8xMl9pbnB1dFwiKTtcblxuICAgICAgICBpZiAoaW5wdXRFbCkge1xuICAgICAgICAgICAgYXV0b3NpemUoaW5wdXRFbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZHZhbmNlIFRhYmxlc1xuICAgIHZhciBfaW5pdEFkdmFuY2VkVGFibGVHcm91cFNlbGVjdGlvbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRhYmxlID0gS1RVdGlsLmdldEJ5SWQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKCF0YWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgS1RVdGlsLm9uKHRhYmxlLCAndGhlYWQgdGggLmNoZWNrYm94ID4gaW5wdXQnLCAnY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBjaGVja2JveGVzID0gS1RVdGlsLmZpbmRBbGwodGFibGUsICd0Ym9keSB0ZCAuY2hlY2tib3ggPiBpbnB1dCcpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2hlY2tib3hlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNoZWNrYm94ZXNbaV0uY2hlY2tlZCA9IHRoaXMuY2hlY2tlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIF9pbml0UHJpY2VTbGlkZXIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAvLyBpbml0IHNsaWRlclxuICAgICAgICB2YXIgc2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudCk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2xpZGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzbGlkZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vVWlTbGlkZXIuY3JlYXRlKHNsaWRlciwge1xuICAgICAgICAgICAgc3RhcnQ6IFsyMCwgNjBdLFxuICAgICAgICAgICAgY29ubmVjdDogdHJ1ZSxcbiAgICAgICAgICAgIHJhbmdlOiB7XG4gICAgICAgICAgICAgICAgJ21pbic6IDAsXG4gICAgICAgICAgICAgICAgJ21heCc6IDEwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBFZHVjYXRpb24gU2hvdyBNb3JlIERlbW9cbiAgICB2YXIgX2luaXRFZHVjYXRpb25TaG93TW9yZUJ0biA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZWwgPSBLVFV0aWwuZ2V0QnlJZCgna3RfYXBwX2VkdWNhdGlvbl9tb3JlX2ZlZWRzX2J0bicpO1xuXG4gICAgICAgIGlmICghZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIEtUVXRpbC5hZGRFdmVudChlbCwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZWR1Y2F0aW9uLW1vcmUtZmVlZHMnKTtcblxuICAgICAgICAgICAgaWYgKCFlbGVtZW50cyB8fCBlbGVtZW50cy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgS1RVdGlsLmJ0bldhaXQoZWwsICdzcGlubmVyIHNwaW5uZXItcmlnaHQgc3Bpbm5lci13aGl0ZSBwci0xNScsICdQbGVhc2Ugd2FpdC4uLicsIHRydWUpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5idG5SZWxlYXNlKGVsKTtcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWwsICdkLW5vbmUnKTtcblxuICAgICAgICAgICAgICAgIHZhciBpdGVtO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBlbGVtZW50c1swXTtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGVsZW1lbnRzW2ldLCAnZC1ub25lJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRhcmVhID0gS1RVdGlsLmZpbmQoaXRlbSwgJ3RleHRhcmVhJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0YXJlYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b3NpemUodGV4dGFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvKGl0ZW0pO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFB1YmxpYyBtZXRob2RzXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gR2VuZXJhbCBDb250cm9sc1xuICAgICAgICAgICAgX2luaXREYXRlcmFuZ2VwaWNrZXIoKTtcblxuICAgICAgICAgICAgLy8gU3RhdHMgV2lkZ2V0c1xuICAgICAgICAgICAgX2luaXRTdGF0c1dpZGdldDcoKTtcbiAgICAgICAgICAgIF9pbml0U3RhdHNXaWRnZXQ4KCk7XG4gICAgICAgICAgICBfaW5pdFN0YXRzV2lkZ2V0OSgpO1xuICAgICAgICAgICAgX2luaXRTdGF0c1dpZGdldDEwKCk7XG4gICAgICAgICAgICBfaW5pdFN0YXRzV2lkZ2V0MTEoKTtcbiAgICAgICAgICAgIF9pbml0U3RhdHNXaWRnZXQxMigpO1xuXG4gICAgICAgICAgICAvLyBDaGFydHMgV2lkZ2V0c1xuICAgICAgICAgICAgX2luaXRDaGFydHNXaWRnZXQxKCk7XG4gICAgICAgICAgICBfaW5pdENoYXJ0c1dpZGdldDIoKTtcbiAgICAgICAgICAgIF9pbml0Q2hhcnRzV2lkZ2V0MygpO1xuICAgICAgICAgICAgX2luaXRDaGFydHNXaWRnZXQ0KCk7XG4gICAgICAgICAgICBfaW5pdENoYXJ0c1dpZGdldDUoKTtcbiAgICAgICAgICAgIF9pbml0Q2hhcnRzV2lkZ2V0NigpO1xuICAgICAgICAgICAgX2luaXRDaGFydHNXaWRnZXQ3KCk7XG4gICAgICAgICAgICBfaW5pdENoYXJ0c1dpZGdldDgoKTtcbiAgICAgICAgICAgIF9pbml0Q2hhcnRzV2lkZ2V0OSgpO1xuXG4gICAgICAgICAgICAvLyBNaXhlZCBXaWRnZXRzXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MSgpO1xuICAgICAgICAgICAgX2luaXRNaXhlZFdpZGdldDIoKTtcbiAgICAgICAgICAgIF9pbml0TWl4ZWRXaWRnZXQzKCk7XG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0NCgpO1xuICAgICAgICAgICAgX2luaXRNaXhlZFdpZGdldDUoKTtcbiAgICAgICAgICAgIF9pbml0TWl4ZWRXaWRnZXQ2KCk7XG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MTMoKTtcbiAgICAgICAgICAgIF9pbml0TWl4ZWRXaWRnZXQxNCgpO1xuICAgICAgICAgICAgX2luaXRNaXhlZFdpZGdldDE1KCk7XG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MTYoKTtcbiAgICAgICAgICAgIF9pbml0TWl4ZWRXaWRnZXQxNygpO1xuICAgICAgICAgICAgX2luaXRNaXhlZFdpZGdldDE4KCk7XG5cbiAgICAgICAgICAgIC8vIFRpbGVzIFdpZGdldHNcbiAgICAgICAgICAgIF9pbml0VGlsZXNXaWRnZXQxKCk7XG4gICAgICAgICAgICBfaW5pdFRpbGVzV2lkZ2V0MigpO1xuICAgICAgICAgICAgX2luaXRUaWxlc1dpZGdldDUoKTtcbiAgICAgICAgICAgIF9pbml0VGlsZXNXaWRnZXQ4KCk7XG4gICAgICAgICAgICBfaW5pdFRpbGVzV2lkZ2V0MTcoKTtcbiAgICAgICAgICAgIF9pbml0VGlsZXNXaWRnZXQyMCgpO1xuICAgICAgICAgICAgX2luaXRNaXhlZFdpZGdldDIxKCk7XG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MjMoKTtcblxuICAgICAgICAgICAgLy8gVGFibGUgV2lkZ2V0c1xuICAgICAgICAgICAgX2luaXRBZHZhbmNlZFRhYmxlR3JvdXBTZWxlY3Rpb24oJ2t0X2FkdmFuY2VfdGFibGVfd2lkZ2V0XzEnKTtcbiAgICAgICAgICAgIF9pbml0QWR2YW5jZWRUYWJsZUdyb3VwU2VsZWN0aW9uKCdrdF9hZHZhbmNlX3RhYmxlX3dpZGdldF8yJyk7XG4gICAgICAgICAgICBfaW5pdEFkdmFuY2VkVGFibGVHcm91cFNlbGVjdGlvbigna3RfYWR2YW5jZV90YWJsZV93aWRnZXRfMycpO1xuICAgICAgICAgICAgX2luaXRBZHZhbmNlZFRhYmxlR3JvdXBTZWxlY3Rpb24oJ2t0X2FkdmFuY2VfdGFibGVfd2lkZ2V0XzQnKTtcblxuICAgICAgICAgICAgLy8gRm9ybSBXaWRnZXRzXG4gICAgICAgICAgICBfaW5pdFByaWNlU2xpZGVyKCdrdF9wcmljZV9zbGlkZXInKTtcblxuICAgICAgICAgICAgLy8gRm9ybXMgd2lkZ2V0c1xuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDEoKTtcbiAgICAgICAgICAgIF9pbml0Rm9ybXNXaWRnZXQyKCk7XG4gICAgICAgICAgICBfaW5pdEZvcm1zV2lkZ2V0MygpO1xuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDQoKTtcbiAgICAgICAgICAgIF9pbml0Rm9ybXNXaWRnZXQ1KCk7XG4gICAgICAgICAgICBfaW5pdEZvcm1zV2lkZ2V0NigpO1xuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDcoKTtcbiAgICAgICAgICAgIF9pbml0Rm9ybXNXaWRnZXQ4KCk7XG4gICAgICAgICAgICBfaW5pdEZvcm1zV2lkZ2V0OSgpO1xuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDEwKCk7XG4gICAgICAgICAgICBfaW5pdEZvcm1zV2lkZ2V0MTEoKTtcblxuICAgICAgICAgICAgLy8gRWR1Y2F0aW9uIEFwcFxuICAgICAgICAgICAgX2luaXRFZHVjYXRpb25TaG93TW9yZUJ0bigpO1xuICAgICAgICB9XG4gICAgfVxufSgpO1xuXG4vLyBXZWJwYWNrIHN1cHBvcnRcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RXaWRnZXRzO1xufVxuXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICBLVFdpZGdldHMuaW5pdCgpO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/widgets.js\n");

/***/ }),

/***/ 158:
/*!******************************************************!*\
  !*** multi ./resources/metronic/js/pages/widgets.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/bilal/work/development/ematrix/rimula/shell/resources/metronic/js/pages/widgets.js */"./resources/metronic/js/pages/widgets.js");


/***/ })

/******/ });
